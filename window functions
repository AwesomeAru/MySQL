#partition by - does not reduce the number of rows (to number of distinct rows like in group by) but keeps them separate

select dem.first_name, dem.last_name, gender, salary, avg(salary) over (partition by gender) as avg_sal
from employee_demographics dem
join employee_salary sal
	on dem.employee_id = sal.employee_id
; 

select dem.first_name, dem.last_name, gender, salary, sum(salary) over (partition by gender) as sum_sal
from employee_demographics dem
join employee_salary sal
	on dem.employee_id = sal.employee_id
; 

select dem.first_name, dem.last_name, gender, salary, dem.employee_id,
sum(salary) over (partition by gender order by dem.employee_id) as rolling_total
from employee_demographics dem
join employee_salary sal
	on dem.employee_id = sal.employee_id
; 

#when we do rank, we get - not the next number neumerically, but the next number positionally. dense_rank gives next number neumerically

select dem.first_name, dem.last_name, gender, salary, dem.employee_id,
sum(salary) over (partition by gender order by dem.employee_id desc) as rolling_total,
rank() over (partition by gender order by salary desc) as rank_no,
dense_rank() over (partition by gender order by salary desc) as dense_rank_no,
row_number() over (partition by gender order by salary desc) as rownumber
from employee_demographics dem
join employee_salary sal
	on dem.employee_id = sal.employee_id
; 
